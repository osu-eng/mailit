<?php
/**
 * @file
 * Code for the MailIt feature.
 */

include_once 'mailit.features.inc';
include_once 'mailit.token.inc';

define('MAILIT_CAMPAIGN_FORM_LAST_STEP', 3);

function mailit_init() {
  drupal_add_css(drupal_get_path('module', 'mailit')."/mailit.css", array('group' => CSS_DEFAULT, 'every_page' => TRUE));

}

/**
 * Implementation of hook_menu().
 */
function mailit_menu() {

  $items = array();

  $items['campaign/%/v/%'] = array(
    'page callback' => 'mailit_campaign_view',
    'page arguments' => array(1, 3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );

  $items['campaign/%node/preview'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mailit_campaign_preview_form', 1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    );

  return $items;
}

/**
 * Alters the mailmime theme registry for html mail. This may mess up other mailmime use cases.
 */
function mailit_theme_registry_alter(&$theme_registry) {

  $path_to_module = drupal_get_path('module', 'mailit');
  $theme_registry['path']  = $path_to_module;
  $theme_registry['theme path'] = $path_to_module;

}

/**
 * A form that allows the user to preview the email, send a test, or send the real message.
 */
function mailit_campaign_preview_form($form, &$form_state, $node) {

  drupal_add_js('
	function setIframeHeight(iframe) {
	  if (iframe) {
	    var iframeWin = iframe.contentWindow || iframe.contentDocument.parentWindow;
	    if (iframeWin.document.body) {
	       iframe.height = iframeWin.document.documentElement.scrollHeight || iframeWin.document.body.scrollHeight;
	    }
	  }
	};
	window.onload = function () {
      setIframeHeight(document.getElementById(\'mail-preview-frame\'));
    };
  	', 'inline');

  $form = array();

  $form['nid'] = array('#type' => 'value', '#value' => $node->nid);

  $form['actions']['edit'] = array(
    '#type' => 'submit',
    '#value' => t('Edit'),
    '#submit' => array('mailit_campaign_preview_form_edit'),
   );
  $form['actions']['send'] = array(
    '#type' => 'submit',
    '#value' => t('Send to List'),
    '#submit' => array('mailit_campaign_preview_form_send'),
   );

  $user = user_uid_optional_load();
  $form['actions']['test'] = array(
    '#type' => 'submit',
    '#value' => t('Send to !email', array('!email' => $user->mail)),
    '#submit' => array('mailit_campaign_preview_form_send'),
   );
  $form['actions']['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('mailit_node_unpublish'),
   );

  $rows = array();
  $results = db_query("SELECT nid, vid, recipient, created FROM {mailit_log} WHERE nid = :nid ORDER BY created DESC ", array(':nid' => $node->nid));
  while ($log = $results->fetchObject()) {
    $rows[] = array(l('view', 'campaign/' . $log->nid . '/v/' . $log->vid), $log->recipient, date('M j, Y @ g:i a', $log->created));
  }
  if (count($rows) > 0) {
    $form['log'] = array(
      '#type' => 'fieldset',
      '#title' => 'Send Log',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE);
    $form['log']['table'] = array(
      '#type' => 'item',
      '#markup' => theme('table', array('header' => array('', 'To', 'Sent'), 'rows' => $rows)));
  }

  $form['preview'] = array(
    '#type' => 'item',
    '#title' => t('Preview of your Email'),
    '#markup' => '<iframe id="mail-preview-frame" style="width:700px;" src="' . url('campaign/' . $node->nid . '/v/' . $node->vid) . '"></iframe>',

  );

  return $form;

}

/**
 * Form callback to send email
 */
function mailit_campaign_preview_form_send($form, &$form_state) {
  $campaign = node_load($form_state['values']['nid']);

  if ($form_state['values']['op'] == 'Send to List') {
    $ref = field_get_items('node', $campaign, 'field_mail_cpn_list');
    $list = node_load($ref[0]['target_id']);
    $field = field_get_items('node', $campaign, 'field_mail_list_address');
    drupal_mail('mailit', 'send/' . $campaign->nid, $field[0]['email'], language_default());
    drupal_set_message(t('Message sent to !mail', array('!mail' => $field[0]['email'])));
  }
  else {
  	$user = user_uid_optional_load();
    drupal_mail('mailit', 'test/' . $campaign->nid, $user->mail, language_default());
    drupal_set_message(t('Test message sent to !mail', array('!mail' => $user->mail)));
  }
}

function mailit_campaign_preview_form_send_test($form, &$form_state) {
  $campaign = node_load($form_state['values']['nid']);
}

/**
 * Implementation of hook_mail().
 */
function mailit_mail($key, &$message, $params) {

  if (!preg_match('|^([^/]+)/(\d+)$|', $key, $matches)) {
    drupal_set_message('Invalid key to mailit_mail', 'error');
  }
  else {
  	$mode = $matches[1];
  	$nid = $matches[2];

    $campaign = node_load($nid);

    // Set subject
    $field = field_get_items('node', $campaign, 'field_mail_cpn_subject');
    $message['subject'] = check_plain($field[0]['value']);

    // Set body
    $message['body'] = mailit_campaign_html($campaign);

    // Set from
    $from = field_get_items('node', $campaign, 'field_mail_cpn_from');
    $from_name = field_get_items('node', $campaign, 'field_mail_cpn_from_name');
    $message['from'] = check_plain($from_name[0]['value']) . '<' . $from[0]['email'] . '>';

    // Set reply-to
    $field = field_get_items('node', $campaign, 'field_mail_cpn_replyto');
    $message['hedaers']['Reply-To'] = $field[0]['email'];

    // Try sending html email
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';

    // Load user
    $user = user_uid_optional_load();

    if ($mode == 'test') {
      $message['to'] = $user->mail;
    }
    else {
      // Set to and other fields
      $ref = field_get_items('node', $campaign, 'field_mail_cpn_list');
      $list = node_load($ref[0]['target_id']);
      $field = field_get_items('node', $list, 'field_mail_list_address');
      $message['to'] = $field[0]['email'];

      // Set CC
      $ccs = field_get_items('node', $campaign, 'field_mail_cpn_cc');
      $cc_addresses = array();
      if (is_array($ccs)) {
        foreach ($ccs as $cc) {
          $cc_addresses[] = $cc['email'];
        }
        $message['headers']['CC'] = join(',', $cc_addresses);
      }
    }

    db_delete('mailit_log')
      ->condition('nid', $campaign->nid)
      ->condition('vid', $campaign->vid)
      ->execute();
    db_insert('mailit_log')
      ->fields(array(
        'nid' => $campaign->nid,
        'vid' => $campaign->vid,
        'uid' => $user->uid,
        'created' => REQUEST_TIME,
        'recipient' => $message['to'],
        'html' => $message['body'],
  		))
      ->execute();
  }
}

/**
 * Form callback to redirect to editing.
 */
function mailit_campaign_preview_form_edit($form, &$form_state) {
  drupal_goto('node/' . $form_state['values']['nid'] . '/edit');
}

/**
 * Implementation of hook_node_view().
 *
 * Reroutes mail_campaign views to the preview. There's probably a much better way to do this.
 */
function mailit_node_view($node, $build_mode = 'full') {
  if ($node->type == 'mail_campaign') {
  	// Cheesiest. hack. ever.
    drupal_goto('campaign/' . $node->nid . '/preview');
  }
}

/**
 * Generates HTML for an email from the campaign.
 *
 * This function should be made themeable and probably be vid aware.
 */
function mailit_campaign_html($campaign) {
  $ref = field_get_items('node', $campaign, 'field_mail_cpn_tpl_ref');
  $template = node_load($ref[0]['target_id']);

  $ref = field_get_items('node', $campaign, 'field_mail_cpn_list');
  $list = node_load($ref[0]['target_id']);

  $field = field_get_items('node', $template, 'field_mail_tpl_code');
  $html = $field[0]['value'];

  // Get rid of leading spaces to make plain text better
  $html = preg_replace('/^\s+/', '', $html);

  // Replace our tokens
  $html = token_replace($html, array('mailit_campaign' => $campaign, 'mailit_list' => $list));

  return $html;
}

/**
 * Menu callback to view a campaign.
 */
function mailit_campaign_view($nid, $vid) {
  $campaign = node_load($nid);
  if ($campaign->vid = $vid) {
    // If the vid is the current vid, always show a live rendering
    print mailit_campaign_html($campaign);
  }
  else if ($log = db_query("SELECT * FROM {mailit_log} WHERE nid = :nid and vid = :vid", array(':nid' => $nid, ':vid' => $vid))->fetchObject()) {
    // If we need something other than the current version, assume we're trying to send it from the log
  	print $log->html;
  }
  else {
    // Otherwise this is not something we should show.
  	drupal_not_found();
  }
}

/**
 * Implementation of hook_wysiwyg_settings_alter().
 *
 * This configures some editor bits. It should be moved to dosu_edit.
 */
function mailit_wysiwyg_editor_settings_alter(&$settings, $context) {
  if ($context['profile']->editor == 'ckeditor') {
    $settings['forcePasteAsPlainText'] = 'true';
    $settings['height'] = 200;
    if (isset($settings['extraPlugins'])) {
      $settings['extraPlugins'] .= ',codemirror,wordcount,bidi';
    }
    else {
      $settings['extraPlugins'] = 'codemirror,wordcount,bidi';
    }
  }
}

/**
 * Implementation of hook_form_alter() for mail_campaign nodes.
 *
 * Breaks the form up into a multistep form.
 * Conditionally hides and relabels fields as governed by referenced template.
 */
function mailit_form_mail_campaign_node_form_alter(&$form, &$form_state, $form_id) {

  $step = isset($form_state['storage']['step']) ? $form_state['storage']['step'] : 1;

  // Manually add a description to the title.
  $form['title']['#description'] = t('A descriptive name for adminsitrative purposes. This is not visible to recipients and usually won\'t be seen by list moderators.');

  // Hide revision fieldset
  $form['revision_information']['#access'] = FALSE;

  if ($step > 1) {
    $form['actions']['previous'] = array(
      '#type'   => 'submit',
      '#value'  => t('Previous'),
      '#submit' => array('mailit_campaign_form_previous', 'node_form_submit_build_node'),
      // -1 so that it appears before the "Next" button added later.
      '#weight' => -1,
      '#limit_validation_errors' => array(),
    );
  }
  if ($step < MAILIT_CAMPAIGN_FORM_LAST_STEP) {
    $form['actions']['next'] = array(
      '#type'   => 'submit',
      '#value'  => t('Next'),
      '#submit' => array('mailit_campaign_form_next', 'node_form_submit_build_node'),
    );
  }
  else {
  	$form['actions']['next']['#access'] = TRUE;
  }

  if (($step < MAILIT_CAMPAIGN_FORM_LAST_STEP) && !is_numeric($form['nid']['#value'])) {
    // If it's a new node and earlier than the last step...
    $form['actions']['submit']['#access'] = FALSE;
  }
  if (array_key_exists('delete', $form['actions'])) {
    $form['actions']['delete']['#submit'] = array('mailit_node_unpublish');
  }

  $steps = mailit_campaign_form_by_step();
  foreach ($steps as $key => $step_current) {
    if ($step_current == $step) {
      if ($step_current == 3) {
        $map = mailit_template_field_map($form_state['storage']['tpl_nid']);
        //dsm($map);
        if (array_key_exists($key, $map)) {
          if (isset($form['actions']['next'])) {
            $form['actions']['next']['#limit_validation_errors'][] = array($key);
          }

          $lang = $form[$key]['#language'];
          $form[$key][$lang][0]['#title'] = check_plain($map[$key]['label']);
          $form[$key][$lang][0]['#description'] = $map[$key]['description'];
          if (!array_key_exists('#type', $form[$key][$lang][0])) {
            // For some reason plain text has no type.
            if (!isset($form[$key][$lang][0]['value']['#default_value'])) {
              $form[$key][$lang][0]['value']['#default_value'] = $map[$key]['default'];
            }
          }
          else {
            switch ($form[$key][$lang][0]['#type']) {
              case 'text_format':
                if (!isset($form[$key][$lang][0]['#default_value'])) {
                  $form[$key][$lang][0]['#default_value'] = $map[$key]['default'];
                }
                break;
              case 'link_field':
                if (!isset($form[$key][$lang][0]['#default_value']['url'])) {
                  $form[$key][$lang][0]['#default_value']['url'] = $map[$key]['default'];
                }
                break;
              case 'managed_file':
              default:
                // These are not yet supported.
                break;
            }
          }
        }
        else {
          $form[$key]['#access'] = FALSE;
        }
      }
    }
    else {
      $form[$key]['#access'] = FALSE;
    }
  }
}

/**
 * Unpublishes a node instead of deleting.
 */
function mailit_node_unpublish($form, &$form_state) {
  if (array_key_exists('#node', $form)) {
    // if we come in from the node edit pages
    $node = $form['#node'];
  }
  else if (array_key_exists($form_state['values']['nid'])) {
    // If we come in from the preview page
    $node = node_load($form_state['values']['nid']);
  }
  $node->status = 0;
  node_save($node);
  drupal_goto('mail/my-campaigns');
}

/**
 * A helper function to put a campaign field in a particular step of a multistep form.
 */
function mailit_campaign_form_by_step() {

  $steps = array(
    // -1 means never show.
    'title'      => 1,
    'field_mail_cpn_list'   => 1,
    'field_mail_cpn_subject'   => 1,
    'field_mail_cpn_from'      => 1,
    'field_mail_cpn_from_name' => 1,
    'field_mail_cpn_replyto'   => 1,
    'field_mail_cpn_cc'        => 1,
    'field_mail_cpn_tpl_ref'   => 2,
  );
  foreach (mailit_template_fields() as $field) {
  	$steps[$field] = 3;
  }
  return $steps;
}

/**
 * Defines the customizable fields that exist in a campaign_node.
 *
 * These get removed/relabled depending on the template.
 */
function mailit_template_fields() {
  $fields = array(
  	// plain text
    'field_mail_cpn_plain1',
    'field_mail_cpn_plain2',
    'field_mail_cpn_plain3',
    'field_mail_cpn_plain4',
    'field_mail_cpn_plain5',
    'field_mail_cpn_plain6',
    // Custom fields
    'field_mail_cpn_teaser',
    'field_mail_cpn_body',
    'field_mail_cpn_contact',
    // social
    'field_mail_cpn_facebook',
    'field_mail_cpn_linkedin',
    'field_mail_cpn_twitter',
    'field_mail_cpn_youtube',
    'field_mail_cpn_flickr',
    // html
    'field_mail_cpn_html1',
    'field_mail_cpn_html2',
    'field_mail_cpn_html3',
    'field_mail_cpn_html4',
    'field_mail_cpn_html5',
    'field_mail_cpn_html6',
    // images
    'field_mail_cpn_img1',
    'field_mail_cpn_img2',
    'field_mail_cpn_img3',
    'field_mail_cpn_img4',
    'field_mail_cpn_img5',
    'field_mail_cpn_img6',
    // links
    'field_mail_cpn_link1',
    'field_mail_cpn_link2',
    'field_mail_cpn_link3',
    'field_mail_cpn_link4',
    'field_mail_cpn_link5',
    'field_mail_cpn_link6',
    );
  return $fields;
}

/**
 * Maps a full field name to a shortened version in a template.
 *
 * For example, field_mail_cpn_plain1 => plain1.
 */
function mailit_template_field_map($nid){

  $allowed = mailit_template_fields();

  $template = entity_metadata_wrapper('node', node_load($nid));
  $map = array();
  $lines = preg_split("/\n/", $template->field_mail_tpl_variables->value());
  foreach ($lines as $line) {
    $fields = preg_split('/\s*\|\s*/', $line);
    if (count($fields) > 1) {
      $id = 'field_mail_cpn_' . $fields[0];
      if (in_array($id, $allowed)) {
        $payload = array(
          'id' => $id,
          'label' => $fields[1],
          'description' => NULL,
          'default' => NULL);
        if (count($fields) > 2) {
          $payload['description'] = $fields[2];
        }
        if (count($fields) > 3) {
          $payload['default'] = $fields[3];
        }
        $map[$id] = $payload;
      }
      else {
        drupal_set_message(check_plain($id) . ' does not exist.  There is a problem in the template. Please contact IT.', 'error');
      }
    }
  }
  return $map;
}

/**
 * Part of the multi-step campaign node form.
 */
function mailit_campaign_form_next($form, &$form_state) {

  if (array_key_exists('field_mail_cpn_tpl_ref', $form_state['values'])) {
  	$form_state['storage']['tpl_nid'] = $form_state['values']['field_mail_cpn_tpl_ref']['und'][0]['target_id'];
  }
  if (!isset($form_state['storage']['step'])) {
    $form_state['storage']['step'] = 1;
  }
  if ($form_state['storage']['step'] == MAILIT_CAMPAIGN_FORM_LAST_STEP) {
    $form_state['rebuild'] = FALSE;
  }
  else {
    $form_state['rebuild'] = TRUE;
    $form_state['storage']['step']++;
  }
}

/**
 * Part of the multi-step campaign node form.
 */
function mailit_campaign_form_previous($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $form_state['storage']['step']--;
  unset($form_state['node_preview']);
}

/**
 * This doesn't seem to do anything.
 */
function mailit_field_attach_validate($obj_type, $object, &$errors) {
  if (arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit')) {
    // foo and bar fields are handled elsewhere so nuke their errors.
    unset($errors['foo'], $errors['bar']);
  }
}

